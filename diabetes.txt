- describe the project
- choose a dataset
- create a basic model
- design a rest api
- implement the api
- package the api to a Docker container
- create a project in GCP
- create a Kubernetes cluster
- deploy the container
- improve the model


- create a basic model
    - download the dataset
    - load the dataset
    - use full data to train the model
    - serialize model to file

- create rest API
    - design the API
        - endpoints
        - request
            - fields
            - types
            - range
        - responses
    - implement API with FastAPI
        - classes for requests/responses
        - load model
        - forward request to predicttion
        

-----
FastAPI installation
    - install visual studio c++ build tools
    - install Rust
    - install FastAPI with pip
    - check 32/64 bit versions

---
to study 
    Pydantic

--
request example

[
  {
    "pregnancies": 6,
    "glucose": 148,
    "blood_pressure": 72,
    "skin_thickness": 35,
    "insulin": 0,
    "bmi": 33.6,
    "diabetes_pedigree_function": 0.627,
    "age": 1
  },
    {
    "pregnancies": 1,
    "glucose": 85,
    "blood_pressure": 66,
    "skin_thickness": 29,
    "insulin": 0,
    "bmi": 26.6,
    "diabetes_pedigree_function": 0.351,
    "age": 31
  },
  {
    "pregnancies": 8,
    "glucose": 183,
    "blood_pressure": 64,
    "skin_thickness": 35,
    "insulin": 0,
    "bmi": 23.3,
    "diabetes_pedigree_function": 0.627,
    "age": 32
  }
]